means_cum <- vector("numeric")
for (i in 1:simulations) {
means[i] <- mean(rexp(n, lambda))
}
means_sum[1] <- means[1]
for (i in 2:simulations) {
means_sum[i] <- means_sum[i-1] + means[i]
}
for (i in 1:simulations) {
means_cum[i] <- means_sum[i]/i
}
print(sprintf("The sample means converged to: %f", means_cum[simulations]))
print(sprintf("The theoretical mean is:       %f", 1 / lambda))
library(ggplot2)
g <- hist(data.frame(x = 1:simulations, y = means_cum), aes(x = x, y = y))
g <- g + geom_hline(yintercept = 0) + geom_line(size = 2)
g <- g + geom_abline(intercept = 1 / lambda, slope = 0, color = "red", size = 1)
g <- g + scale_y_continuous(breaks=c(4.50, 4.75, 5.00, 5.25, 5.50, 5.75), limits=c(4.25, 6))
g <- g + theme(plot.title = element_text(size=12, face="bold", vjust=2, hjust=0.5))
g <- g + labs(title="Cumulative Sample Mean vs Theoretical Population Mean")
g <- g + labs(x = "Number of Simulations", y = "Cumulative Sample Mean")
print(g)
library(ggplot2)
g <- ggplot(data.frame(x = 1:simulations, y = means_cum), aes(x = x, y = y))
g <- g + geom_hline(yintercept = 0) + geom_line(size = 2)
g <- g + geom_abline(intercept = 1 / lambda, slope = 0, color = "red", size = 1)
g <- g + scale_y_continuous(breaks=c(4.50, 4.75, 5.00, 5.25, 5.50, 5.75), limits=c(4.25, 6))
g <- g + theme(plot.title = element_text(size=12, face="bold", vjust=2, hjust=0.5))
g <- g + labs(title="Cumulative Sample Mean vs Theoretical Population Mean")
g <- g + labs(x = "Number of Simulations", y = "Cumulative Sample Mean")
print(g)
hist(1:simulations,col="blue",main="Distribution of Means of rexp")
hist(data.frame(x = 1:simulations, y = means_cum),col="blue",main="Distribution of Means of rexp")
library(ggplot2)
g <- ggplot(data.frame(x = 1:simulations, y = means_cum), aes(x = x, y = y))
g <- g + geom_hline(yintercept = 0) + geom_line(size = 2)
g <- g + geom_abline(intercept = 1 / lambda, slope = 0, color = "red", size = 1)
g <- g + scale_y_continuous(breaks=c(4.50, 4.75, 5.00, 5.25, 5.50, 5.75), limits=c(4.25, 6))
g <- g + theme(plot.title = element_text(size=12, face="bold", vjust=2, hjust=0.5))
g <- g + labs(title="Cumulative Sample Mean vs Theoretical Population Mean")
g <- g + labs(x = "Number of Simulations", y = "Cumulative Sample Mean")
print(g)
library(ggplot2)
g <- ggplot(data.frame(x = 1:simulations, y = means_cum), aes(x = x, y = y))
g <- g + geom_hline(yintercept = 0) + geom_line(size = 2)
g <- g + geom_abline(intercept = 1 / lambda, slope = 0, color = "red", size = 1)
g <- g + scale_y_continuous(breaks=c(4.50, 4.75, 5.00, 5.25, 5.50, 5.75), limits=c(4.25, 6))
g <- g + theme(plot.title = element_text(size=8,  vjust=2, hjust=0.5))
g <- g + labs(title="Cumulative Sample Mean vs Theoretical Population Mean")
g <- g + labs(x = "Number of Simulations", y = "Cumulative Sample Mean")
print(g)
library(ggplot2)
g <- ggplot(data.frame(x = 1:simulations, y = means_cum), aes(x = x, y = y))
g <- g + geom_hline(yintercept = 0) + geom_line(size = 2)
g <- g + geom_abline(intercept = 1 / lambda, slope = 0, color = "red", size = 1)
g <- g + scale_y_continuous(breaks=c(4.50, 4.75, 5.00, 5.25, 5.50, 5.75), limits=c(4.25, 6))
g <- g + theme(plot.title = element_text(size=1,  vjust=2, hjust=0.5))
g <- g + labs(title="Cumulative Sample Mean vs Theoretical Population Mean")
g <- g + labs(x = "Number of Simulations", y = "Cumulative Sample Mean")
print(g)
library(ggplot2)
g <- ggplot(data.frame(x = 1:simulations, y = means_cum), aes(x = x, y = y))
g <- g + geom_abline(intercept = 1 / lambda, slope = 0, color = "red", size = 1)
g <- g + scale_y_continuous(breaks=c(4.50, 4.75, 5.00, 5.25, 5.50, 5.75), limits=c(4.25, 6))
g <- g + theme(plot.title = element_text(size=8, face="bold", vjust=2, hjust=0.5))
g <- g + labs(title="Cumulative Sample Mean vs Theoretical Population Mean")
g <- g + labs(x = "Number of Simulations", y = "Cumulative Sample Mean")
print(g)
library(ggplot2)
g <- ggplot(data.frame(x = 1:simulations, y = means_cum), aes(x = x, y = y))
g <- g + geom_hline(yintercept = 0) + geom_line(size = 1)
g <- g + geom_abline(intercept = 1 / lambda, slope = 0, color = "red", size = 1)
g <- g + scale_y_continuous(breaks=c(4.50, 4.75, 5.00, 5.25, 5.50, 5.75), limits=c(4.25, 6))
g <- g + theme(plot.title = element_text(size=8, face="bold", vjust=2, hjust=0.5))
g <- g + labs(title="Cumulative Sample Mean vs Theoretical Population Mean")
g <- g + labs(x = "Number of Simulations", y = "Cumulative Sample Mean")
print(g)
library(ggplot2)
g <- ggplot(data.frame(x = 1:simulations, y = means_cum), aes(x = x, y = y))
g <- g + geom_hline(yintercept = 0) + geom_line(size = 1)+color = "red"
g <- g + geom_abline(intercept = 1 / lambda, slope = 0, color = "red", size = 1)
g <- g + scale_y_continuous(breaks=c(4.50, 4.75, 5.00, 5.25, 5.50, 5.75), limits=c(4.25, 6))
g <- g + theme(plot.title = element_text(size=8, face="bold", vjust=2, hjust=0.5))
g <- g + labs(title="Cumulative Sample Mean vs Theoretical Population Mean")
g <- g + labs(x = "Number of Simulations", y = "Cumulative Sample Mean")
print(g)
library(ggplot2)
g <- ggplot(data.frame(x = 1:simulations, y = means_cum), aes(x = x, y = y))
g <- g + geom_hline(yintercept = 0) + geom_line(size = 1)+geom_line(color = "red")
g <- g + geom_abline(intercept = 1 / lambda, slope = 0, color = "red", size = 1)
g <- g + scale_y_continuous(breaks=c(4.50, 4.75, 5.00, 5.25, 5.50, 5.75), limits=c(4.25, 6))
g <- g + theme(plot.title = element_text(size=8, face="bold", vjust=2, hjust=0.5))
g <- g + labs(title="Cumulative Sample Mean vs Theoretical Population Mean")
g <- g + labs(x = "Number of Simulations", y = "Cumulative Sample Mean")
print(g)
library(ggplot2)
g <- ggplot(data.frame(x = 1:simulations, y = means_cum), aes(x = x, y = y))
g <- g + geom_hline(yintercept = 0) + geom_line(size = 1)+geom_line(color = "blue")
g <- g + geom_abline(intercept = 1 / lambda, slope = 0, color = "red", size = 1)
g <- g + scale_y_continuous(breaks=c(4.50, 4.75, 5.00, 5.25, 5.50, 5.75), limits=c(4.25, 6))
g <- g + theme(plot.title = element_text(size=8, face="bold", vjust=2, hjust=0.5))
g <- g + labs(title="Cumulative Sample Mean vs Theoretical Population Mean")
g <- g + labs(x = "Number of Simulations", y = "Cumulative Sample Mean")
print(g)
library(ggplot2)
g <- ggplot(data.frame(x = 1:simulations, y = means_cum))
g <- g + geom_hline(yintercept = 0) + geom_line(size = 1)+geom_line(color = "blue")
g <- g + geom_abline(intercept = 1 / lambda, slope = 0, color = "red", size = 1)
g <- g + scale_y_continuous(breaks=c(4.50, 4.75, 5.00, 5.25, 5.50, 5.75), limits=c(4.25, 6))
g <- g + theme(plot.title = element_text(size=8, face="bold", vjust=2, hjust=0.5))
g <- g + labs(title="Cumulative Sample Mean vs Theoretical Population Mean")
g <- g + labs(x = "Number of Simulations", y = "Cumulative Sample Mean")
print(g)
library(ggplot2)
g <- ggplot(data.frame(x = 1:simulations, y = means_cum), aes(x = x, y = y))
g <- g + geom_hline(yintercept = 0) + geom_line(size = 1)+geom_line(color = "blue")
g <- g + geom_abline(intercept = 1 / lambda, slope = 0, color = "red", size = 1)
g <- g + scale_y_continuous(breaks=c(4.50, 4.75, 5.00, 5.25, 5.50, 5.75), limits=c(4.25, 6))
g <- g + theme(plot.title = element_text(size=8, face="bold", vjust=2, hjust=0.5))
g <- g + labs(title="Cumulative Sample Mean vs Theoretical Population Mean")
g <- g + labs(x = "Number of Simulations", y = "Cumulative Sample Mean")
print(g)
library(ggplot2)
g <- ggplot(data.frame(x = 1:simulations, y = means_cum), aes(x = x, y = y))
g <- g + geom_hline(yintercept = 0) + geom_line(size = 1)+geom_line(color = "blue")
g <- g + geom_abline(intercept = 1 / lambda, slope = 0, color = "red", size = 1)
g <- g + scale_y_continuous(breaks=c(4.50, 4.75, 5.00, 5.25, 5.50, 5.75), limits=c(4, 6))
g <- g + theme(plot.title = element_text(size=8, face="bold", vjust=2, hjust=0.5))
g <- g + labs(title="Cumulative Sample Mean vs Theoretical Population Mean")
g <- g + labs(x = "Number of Simulations", y = "Cumulative Sample Mean")
print(g)
simulations = 1000;
n = 40;
lambda = 0.2
means <- vector("numeric")
means_sum <- vector("numeric")
means_cum <- vector("numeric")
for (i in 1:simulations) {
means_sum <- c(means_sum, mean(rexp(40,lambda)))
}
hist(means_sum,col="blue",main="Distribution of Means of rexp")
hist(means_sum,col="blue",main="Distribution of Means of rexp",xlab='Mean Sum')
means_sum
print(g)
g <- g + geom_hline(yintercept = 0) + geom_line(size = 2)+geom_line(color = "blue")
print(g)
library(ggplot2)
g <- ggplot(data.frame(x = 1:simulations, y = means_cum), aes(x = x, y = y))
g <- g + geom_hline(yintercept = 0) + geom_line(size = 1)+geom_line(color = "blue")
g <- g + geom_abline(intercept = 1 / lambda, slope = 0, color = "red", size = 1)
g <- g + scale_y_continuous(breaks=c(4.50, 4.75, 5.00, 5.25, 5.50, 5.75), limits=c(4.25, 6))
g <- g + theme(plot.title = element_text(size=12, face="bold", vjust=2, hjust=0.5))
g <- g + labs(title="Sample Mean vs Theoretical Population Mean")
g <- g + labs(x = "Number of Simulations", y = "Sample Mean")
print(g)
library(datasets)
data(ToothGrowth)
head(ToothGrowth)
plot(ToothGrowth,x=dose,y=len)
plot <- ggplot(ToothGrowth,
aes(x=factor(dose),y=len,fill=factor(dose)))
plot + geom_boxplot(notch=F) + facet_grid(.~supp) +
scale_x_discrete("Dosage (Milligram)") +
scale_y_continuous("Length of Teeth") +
ggtitle("Effect of Dosage and Supplement Type on Tooth Growth")
ggplot(ToothGrowth,
aes(x=factor(dose),y=len,fill=factor(dose)))
+ geom_boxplot(notch=F) + facet_grid(.~supp) +
plot <- ggplot(ToothGrowth,
aes(x=factor(dose),y=len,fill=factor(dose)))
+ geom_boxplot(notch=F) + facet_grid(.~supp) +
scale_x_discrete("Dosage (Milligram)") +
scale_y_continuous("Length of Teeth") +
ggtitle("Effect of Dosage and Supplement Type on Tooth Growth")
plot <- ggplot(ToothGrowth,
aes(x=factor(dose),y=len,fill=factor(dose)))
plot
plot <- ggplot(ToothGrowth,aes(x=factor(dose),y=len,fill=factor(dose)))
plot + geom_boxplot(notch=F) + facet_grid(.~supp) +scale_x_discrete("Dosage (Milligram)") +
scale_y_continuous("Length of Teeth") +ggtitle("Effect of Dosage and Supplement Type on Tooth Growth")
plot <- ggplot(ToothGrowth,aes(x=factor(dose),y=len,fill=factor(dose)))
plot <- plot + geom_boxplot(notch=F) + facet_grid(.~supp) +scale_x_discrete("Dosage (Milligram)") +
scale_y_continuous("Length of Teeth") +ggtitle("Effect of Dosage and Supplement Type on Tooth Growth")
print(plot)
install_from_swirl("Regression Models")
library(swirl)
install_from_swirl("Regression Models")
swirl()
skip()
main
main()
eexists()
exit
exit()
library(swirl)
swirl()
plot(jitter(child,4) ~ parent,galton)
regrline <-
| lm(child ~ parent, galton)
regrline <-lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
summary(regrline)
fit <- lm(child ~ parent, galton)
summary(fit)
summary(fit)
mean(fit$residuals)
cov(fit$residuals,galton$parent)
cov(fit$residuals,galton$parent)
ols.ic <- fit$coef[1]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
ols.slope <- fit$coef[2]
lhs-rhs
lhs-rhs
all.equal(lhs,rhs)
all.equal(lhs,rhs)
varChild <- var(galton$child)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope, ols.ic))
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild,varEst+varRes)
efit <- lm(accel ~ mag+dist, attenu)
1
mean(efit$residuals)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
1
cov(efit$residuals, attenu$dist)
swirl()
swirl()
cor
or(gpa_nor,gch_nor)
cor(gpa_nor,gch_nor)
cor(gpa_nor,gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(child ~ parent, galton)
fit <- lm(child ~ parent, galton)
sqrt(sum(fit$residuals^2) / (n - 2))
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
deviance(fit)/(n-2)
sqrt(deviance(fit)/(n-2))
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
mu <- mean(galton$child)
sTot <- sum((galton$child-mu)^2)
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(fit)
sRes <- deviance(fit)
1-sRes/sTot
summary(fit)$r
summary(fit)$r.squared
summary(fit)$r.squared
cor(galton$parent,galton$child)^2
swirl()
swirl()
swirl()
ones <- rep(1, nrow(galton))
ones <- rep(1, nrow(galton))
ones <- rep(1, nrow(galton))
ones <- rep(1, nrow(galton))
swirl()
lm(child ~ ones + parent -1, galton)
lm(child ~ ones + parent -1, galton)
lm(child ~ ones + parent -1, galton)
lm(child ~ 1, galton)
lm(child ~ 1, galton)
head(trees)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant - 1, trees)
fit <- lm(Volume ~ Girth + Height + Constant - 1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
lapply(list(fit, fit2), coef)
all <- lm(Fertility ~ ., swiss)
all <- lm(Fertility ~ ., swiss)
summary(all)
1
summary(lm(Fertility ~ Agriculture, swiss))
cor
cor(swiss$Examination,swiss$Education)
cor(swiss$Examination,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
makelms()
makelms()
ec <- swiss$Examination+swiss$Catholic
ec <- swiss$Examination+swiss$Catholic
efit <- lm(Fertility ~ . + ec, swiss)
efit <- lm(Fertility ~ . + ec, swiss)
all$coefficients-efit$coefficients
all$coefficients-efit$coefficients
1
dim(InsectSprays)
dim(InsectSprays)
head(InsectSprays,15)
head(InsectSprays,15)
SB
SB
sb
sB
sB
summary(InsectSprays[,2])
summary(InsectSprays[,2])
sapply(InsectSprays,class)
sapply(InsectSprays,class)
fit <- lm(count ~ spray, InsectSprays)
fit <- lm(count ~ spray, InsectSprays).
fit <- lm(count ~ spray, InsectSprays)
summary(fit)$coef
summary(fit)$coef
est <- summary(fit)$coef[,1]
est <- summary(fit)$coef[,1]
mean(sA)
mean(sA)
mean(sB)
mean(sB)
nfit <- lm(count ~ spray - 1, InsectSprays)
nfit <- lm(count ~ spray - 1, InsectSprays)
summary(nfit)$coef
1
spray2 <- relevel(InsectSprays$spray,\"C\")
spray2 <- relevel(InsectSprays$spray,\"C\")"
spray2 <- relevel(InsectSprays$spray,\"C\")
spray2 <- relevel(InsectSprays$spray,\"C\
spray2 <- relevel(InsectSprays$spray,\"C\"
spray2 <- relevel(InsectSprays$spray,\"C\")
spray2 <- relevel(InsectSprays$spray,"C")
1
fit2 <- lm(count ~ spray2, InsectSprays)
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
summary(fit2)$coef
mean(sC)
1
(fit$coef[2]-fit$coef[3])/1.601
(fit$coef[2]-fit$coef[3])/1.6011
1
dim(hunger)
1
2
5
6
7
948
948
"names(hunger)
"names(hunger)
names(hunger)
names(hunger)
fit <- lm(Numeric ~ Year, hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
1
1
lmF <- lm(hunger$Numeric[hunger$Sex=="Female"] ~ hunger$Year[hunger$Sex=="Female"])
1
lmM <- lm(hunger$Numeric[hunger$Sex=="Male"] ~ hunger$Year[hunger$Sex=="Male"])
1
lmBoth <- lm(hunger$Numeric ~ hunger$Year + hunger$Sex)
1
summary(lmBoth)
1
lmInter <- lm(hunger$Numeric ~ hunger$Year + hunger$Sex + hunger$Year * hunger$Sex)
1
1
1
summary(lmInter)
swirl()
1
fit <- lm(y ~ x, out2)
fit <- lm(y ~ x, out2)
plot(fit, which=1)
1
fitno <- lm(y ~ x, out2[-1, ])
1
plot(fitno, which=1)
1
coef(fit)-coef(fitno)
1
head(dfbeta(fit))
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1
1-resid(fit)[1]/resno
1
head(hatvalues(fit))
1
sigma <- sqrt(deviance(fit)/df.residual(fit))
1
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
1
head(cbind(rstd, rstandard(fit)))
1
plot(fit, which=3)
1
plot(fit, which=2)
1
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
1
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
1
head(rstudent(fit))
1
dy <- predict(fitno, out2)-predict(fit, out2)
1
sum(dy^2)/(2*sigma^2)
1
plot(fit, which=5)
1
rgp1()
rgp1()
rgp2()
1
head(swiss)
head(swiss)
mdl <- lm(Fertility ~ ., swiss)
1
vif(mdl)
1
1
mdl2 <- lm(Fertility ~ . -Examination, swiss)
vif(mdl2)
1
x1c <- simbias()
1
apply(x1c, 1, mean)
apply(x1c, 1, mean)
fit1 <- lm(Fertility ~ Agriculture, swiss)
1
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
1
anova(fit1, fit3)
1
deviance(fit3)
1
d <- deviance(fit3)/43
1
n <- (deviance(fit1) - deviance(fit3))/2
1
n/d
1
pf(n/d, 2, 43, lower.tail=FALSE)
1
shapiro.test(fit3$residuals)
1
anova(fit1, fit3, fit5, fit6)
1
ravenData
1
mdl <- glm(ravenWinNum ~ ravenScore, binomial, ravenData)
1
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
1
exp(lodds)/(1+exp(lodds))
1
summary(mdl)
1
exp(confint(mdl))
1
anova(mdl)
1
qchisq(0.95, 1
)
1
var(rpois(1000, 50))
nxt()
1
View(hits)
1
class(hits[,'date'])
1
as.integer(head(hits[,'date'])
)
1
mdl <- glm(visits ~ date, poisson, hits)
1
summary(mdl)
1
exp(confint(mdl, 'date'))
1
which.max(hits[,'visits'])
1
hits[704,]
1
lambda <- mdl$fitted.values[704]
1
qpois(.95, lambda)
1
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset =log(visits + 1))
1
qpois(.95, mdl2$fitted.values[704]
)
install.packages("shiny")
library(shiny)
shiny::runApp('C:/Krishna/MyProject/DataScience/9_shiny/PredictMPG')
shiny::runApp('C:/Krishna/MyProject/DataScience/9_Developing_Data_Products/Developing-Data-Products/PredictMPG')
# Shiny app simulating retirement cash-flow scenarios
For a direct access to this Shiny application, click [here](https://kbhatt.shinyapps.io/PredictMPG/)
setwd("C:/Krishna/MyProject/DataScience/9_Developing_Data_Products/Developing-Data-Products")
setwd("C:/Krishna/MyProject/DataScience/9_Developing_Data_Products/Developing-Data-Products")
library(shiny)
runApp('PredictMPG')
For more details on authoring R presentations click the
**Help** button on the toolbar.
